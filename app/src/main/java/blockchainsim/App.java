/*
 * This source file was generated by the Gradle 'init' task
 */
package blockchainsim;

import org.checkerframework.checker.units.qual.C;
import org.checkerframework.checker.units.qual.N;

import java.io.File;
import java.security.PublicKey;
import java.util.*;

public class App {


    public static void main(String[] args) throws Exception {

        // ====================== BLOCKCHAIN & GENESIS NODE SETUP =============================

        Blockchain blockchain = Blockchain.getInstance();

         Miner miner = new Miner(blockchain);
         Wallet minerWallet = new Wallet();

        System.out.println(minerWallet.getPublicAddress() + " " + minerWallet.getPublicKey() + " " + minerWallet.getPrivateKey());

         WalletUtil.storeWallet(minerWallet, "minerWallet");

        Wallet minerWallet2 = WalletUtil.loadWallet("app/src/main/resources/WalletData/minerWallet.json");

        System.out.println(minerWallet2.getPublicAddress() + " " + minerWallet2.getPublicKey() + " " + minerWallet2.getPrivateKey());


//        //Genesis block creation, with coinbase transaction
//        Block GenesisBlock = new Block(0, "00000000000000000000", blockchain.getDifficulty());
//        GenesisBlock.addTransaction(new CoinbaseTransaction((PublicKey) minerWallet.getPublicKey(), 50.0));
//
//        System.out.println("\n-------------\nGenesis block\n-------------\nHash: " + GenesisBlock.getHash() + "\nNonce: " + GenesisBlock.getNonce());
//
//        //TEST TRANSACTION/VERIFICATION TO ADD TO BLOCK------------------------------------------------
//
//
//        //---------------------------------------------------------------------------------------------
//
//        // Mine Genesis Block
//        miner.mineBlock(GenesisBlock, blockchain.getDifficulty());
//
//        //Verify Genesis block with proof of work
//        BCProtocol.verifyBlockHash(GenesisBlock);
//
//        //Serialize block into json format
//        BlockUtil.storeBlock(GenesisBlock);
//
//        //De-serialize block from json back into block object
//        Block block = BlockUtil.readBlock(new File("app/src/main/resources/BlockData/block0000000000.json"));
//
//        //Check block is valid
//        BCProtocol.verifyBlockHash(block);



    }



}
