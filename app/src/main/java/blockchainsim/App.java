/*
 * This source file was generated by the Gradle 'init' task
 */
package blockchainsim;

import org.checkerframework.checker.units.qual.C;
import org.checkerframework.checker.units.qual.N;

import java.io.File;
import java.security.PublicKey;
import java.util.*;

public class App {


    public static void main(String[] args) throws Exception {

        // ====================== BLOCKCHAIN & GENESIS NODE SETUP =============================

        Block genBlock = BlockUtil.readBlock(new File("app/src/main/resources/BlockData/block0000000000.json"));
        Block secondBlock = BlockUtil.readBlock(new File("app/src/main/resources/BlockData/block0000000001.json"));

        Blockchain blockchain = Blockchain.getInstance();

        Miner miner = new Miner(blockchain);

        Wallet minerWallet = WalletUtil.loadWallet("app/src/main/resources/WalletData/minerWallet.json");

        System.out.println(minerWallet.getPublicAddress() + " " + minerWallet.getPublicKey() + " " + minerWallet.getPrivateKey());


        Wallet wallet1 = new Wallet();

        // Create the peer network and add nodes
        PeerNetwork pn = new PeerNetwork();
        Node node = new Node(blockchain);
        pn.addNode(node);
        Node node2 = new Node(blockchain);
        pn.addNode(node2);
        Node node3 = new Node(blockchain);
        pn.addNode(node3);
        pn.addNode(miner);

        // create a new valid transaction for test
        PeerTransaction tx = new PeerTransaction((PublicKey) minerWallet.getPublicKey(), (PublicKey) wallet1.getPublicKey(), 5.00);
        tx.signTransaction(minerWallet.getPrivateKey());

        // verify transaction with nodes
        if(node.verifyTransaction(tx)){
            if(pn.broadcastTransaction(node, tx) == 2){
                System.out.println("all nodes verified");
                for(Node n: pn.getNodeList()){
                    System.out.println("Mempool" + n.getMempool());
                    System.out.println("Utxo:" + n.getUtxoPool());
                }
            }
        }


        // create a new block, add a coinbase transaction for the miner and add the peer transaction
        Block block = new Block(3, secondBlock.getHash(), blockchain.getDifficulty());
        block.addTransaction(new CoinbaseTransaction((PublicKey) minerWallet.getPublicKey(), blockchain.getRewardLimit()));
        block.addTransaction(tx);
        miner.mineBlock(block);

        // check all transaction inputs/outpus are correct after verification
        System.out.println("Coinbase outputs");
        System.out.println(block.getData().get(0).getOutputs());
        System.out.println("Peer outputs/inputs");
        System.out.println(((PeerTransaction)block.getData().get(1)).getOutputs());
        System.out.println(((PeerTransaction)block.getData().get(1)).getInputs());

        // verify block
        if(node.verifyBlock(block)){
            if(pn.broadcastBlock(node, block) == 2){
                System.out.println("Block verififed by all nodes");
                for (Node n: pn.getNodeList()){
                    // check the new utxo pools of the nodes
                    System.out.println("Updated Mempool" + n.getMempool());
                    System.out.println("Updated Utxo:" + n.getUtxoPool());

                }
            }
        }



//        PeerTransaction tx = new PeerTransaction((PublicKey) minerWallet.getPublicKey(), (PublicKey) wallet1.getPublicKey(), 20.0);
//        tx.signTransaction(minerWallet.getPrivateKey());
//
//        System.out.println(
//                node.getUtxoPool().get(0).getAddress() + "\n" + tx.getSender()
//        );
//
//        node.verifyTransaction(tx);
//
//        System.out.println(tx.getInputs() + "\n" + tx.getOutputs());
//
//        Block block = new Block(1, genBlock.getHash(), blockchain.getDifficulty());
//
//        block.addTransaction(new CoinbaseTransaction((PublicKey) minerWallet.getPublicKey(), 50.0));
//        block.addTransaction(tx);
//
//        miner.mineBlock(block, block.getDifficulty());
//
//        BCProtocol.verifyBlockHash(block);
//
//        BlockUtil.storeBlock(block);

//        //Genesis block creation, with coinbase transaction
//        Block GenesisBlock = new Block(0, "00000000000000000000", blockchain.getDifficulty());
//        GenesisBlock.addTransaction(new CoinbaseTransaction((PublicKey) minerWallet.getPublicKey(), 50.0));
//
//        System.out.println("\n-------------\nGenesis block\n-------------\nHash: " + GenesisBlock.getHash() + "\nNonce: " + GenesisBlock.getNonce());
//
//        //TEST TRANSACTION/VERIFICATION TO ADD TO BLOCK------------------------------------------------
//
//
//        //---------------------------------------------------------------------------------------------
//
//        // Mine Genesis Block
//        miner.mineBlock(GenesisBlock, blockchain.getDifficulty());
//
//        //Verify Genesis block with proof of work
//        BCProtocol.verifyBlockHash(GenesisBlock);
//
//        //Serialize block into json format
//        BlockUtil.storeBlock(GenesisBlock);
//
//        //De-serialize block from json back into block object
//        Block block = BlockUtil.readBlock(new File("app/src/main/resources/BlockData/block0000000000.json"));
//
//        //Check block is valid
//        BCProtocol.verifyBlockHash(block);



    }



}
