/*
 * This source file was generated by the Gradle 'init' task
 */
package blockchainsim;

import org.checkerframework.checker.units.qual.A;
import org.checkerframework.checker.units.qual.C;
import org.checkerframework.checker.units.qual.N;

import java.security.PublicKey;
import java.util.*;

public class App {

    ///TODO the decentralise Nodes UTXO stores by calculating it from reading the blockchain
    ///TODO Add mining reward for mining blocks

    public static void main(String[] args) throws Exception {

        // ====================== BLOCKCHAIN & GENESIS NODE SETUP =============================

        Blockchain blockchain = Blockchain.getInstance();

        Miner miner = new Miner(blockchain);
        Wallet minerWallet = new Wallet();
//
//        // Genesis block creation, with coinbase transaction
//        Block GenesisBlock = new Block(0, "00000000000000000000", blockchain.getDifficulty());
//        GenesisBlock.addTransaction(new CoinbaseTransaction((PublicKey) minerWallet.getPublicKey(), 50.0));
//
//        miner.mineBlock(GenesisBlock, blockchain.getDifficulty());
//
//        System.out.println("\n-------------\nGenesis block\n-------------\nHash: " + GenesisBlock.getHash() + "\nNonce: " + GenesisBlock.getNonce());
//
//        Node myNode = new Node(blockchain);
//
//        BCProtocol.verifyBlockHash(GenesisBlock);
//
//        BlockUtil.storeBlock(GenesisBlock);

//        Block block = BlockUtil.readBlock("app/src/main/resources/BlockData/block0000000.json");

        blockchain.addUtxo("id1", new UTXO("cb1", new ArrayList<>(), minerWallet.getPublicAddress(), 50.0));


        Wallet wallet1 = new Wallet();
        Wallet wallet2 = new Wallet();

        PeerTransaction tx1 = new PeerTransaction(minerWallet.getPublicKey(), wallet1.getPublicKey(), 25.0);
        tx1.signTransaction(minerWallet.getPrivateKey());

        Node node1 = new Node(blockchain);
        node1.verifyTransaction(tx1);

        for(UTXO x: node1.getPendingUTXOs()){
            System.out.println(x.getAmount() + " " + x.getOutputIndex());
        }




    }



}
